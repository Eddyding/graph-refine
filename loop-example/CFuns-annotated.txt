# * Copyright 2015, NICTA
# *
# * This software may be distributed and modified according to the terms of
# * the BSD 2-Clause license. Note that NO WARRANTY is provided.
# * See "LICENSE_BSD2.txt" for details.
# *
# * @TAG(NICTA_BSD)


# void
# f (int *p, int x) {
#   int i;
# 
#   for (i = x; i < 100; i ++) { 
#     p[i] = g (i);
#   }
# }
Function Loop.f 5 p#v Word 32 x#v Word 32 Mem Mem HTD HTD PMS PMS 3 Mem Mem HTD HTD PMS PMS
# i = x
11 Basic 4 1 i#v Word 32 Var x#v Word 32

# loop-count = 0    -- invented variable for loop analysis
4 Basic 3 1 loop#2#count Word 32 Num 0 Word 32

# ? i < 100
3 Cond 10 1 Op SignedLess Bool 2 Var i#v Word 32 Num 100 Word 32

# tmpvar = g (i)    -- function result is saved to temporaries called rv#space#ret__int#v and ret__int#v
10 Call 9 Loop.g 4 Var i#v Word 32 Var Mem Mem Var HTD HTD Var PMS PMS 4 rv#space#ret__int#v Word 32 Mem Mem HTD HTD PMS PMS
9 Basic 8 1 ret__int#v Word 32 Var rv#space#ret__int#v Word 32

# p[i] = tmpvar     -- check p[i] is a valid pointer then save temporary there
8 Cond 7 Err Op PAlignValid Bool 2 Type Word 32 Op Plus Word 32 2 Var p#v Word 32 Op Times Word 32 2 Op WordCastSigned Word 32 1 Var i#v Word 32 Num 4 Word 32
7 Basic 6 1 Mem Mem Op MemUpdate Mem 3 Var Mem Mem Op Plus Word 32 2 Var p#v Word 32 Op Times Word 32 2 Op WordCastSigned Word 32 1 Var i#v Word 32 Num 4 Word 32 Var ret__int#v Word 32

# i ++              -- first check i++ does not overflow
6 Cond 5 Err Op Equals Bool 2 Op SignedLessEquals Bool 2 Var i#v Word 32 Op Plus Word 32 2 Var i#v Word 32 Num 1 Word 32 Op SignedLessEquals Bool 2 Num 0 Word 32 Num 1 Word 32
5 Basic 2 1 i#v Word 32 Op Plus Word 32 2 Var i#v Word 32 Num 1 Word 32

# loop-count ++
2 Basic 3 1 loop#2#count Word 32 Op Plus Word 32 2 Var loop#2#count Word 32 Num 1 Word 32

# if loop finished proceed to Ret
1 Basic Ret 0
EntryPoint 11

# int g (int i) {
#   return i * 8 + (i & 15);
# }
Function Loop.g 4 i#v Word 32 Mem Mem HTD HTD PMS PMS 4 ret__int#v Word 32 Mem Mem HTD HTD PMS PMS
# tmpv = i * 8 + (i & 15)     -- first check for overflow
4 Cond 3 Err Op And Bool 2 Op Equals Bool 2 Op SignedLessEquals Bool 2 Op Times Word 32 2 Var i#v Word 32 Num 8 Word 32 Op Plus Word 32 2 Op Times Word 32 2 Var i#v Word 32 Num 8 Word 32 Op BWAnd Word 32 2 Var i#v Word 32 Num 15 Word 32 Op SignedLessEquals Bool 2 Num 0 Word 32 Op BWAnd Word 32 2 Var i#v Word 32 Num 15 Word 32 Op Equals Bool 2 Op Times Word 64 2 Op WordCastSigned Word 64 1 Var i#v Word 32 Op WordCastSigned Word 64 1 Num 8 Word 32 Op WordCastSigned Word 64 1 Op Times Word 32 2 Var i#v Word 32 Num 8 Word 32

3 Basic 1 1 ret__int#v Word 32 Op Plus Word 32 2 Op Times Word 32 2 Var i#v Word 32 Num 8 Word 32 Op BWAnd Word 32 2 Var i#v Word 32 Num 15 Word 32
# proceed to Ret
1 Basic Ret 0
# unreachable check that end of non-void function is indeed unreachable
2 Cond 1 Err Op False Bool 0
EntryPoint 4

