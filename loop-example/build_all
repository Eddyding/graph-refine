# * Copyright 2015, NICTA
# *
# * This software may be distributed and modified according to the terms of
# * the BSD 2-Clause license. Note that NO WARRANTY is provided.
# * See "LICENSE_BSD2.txt" for details.
# *
# * @TAG(NICTA_BSD)

# this script indicates how this example was built. some of the configuration
# is specific to the machine it was built on, but it may serve to explain
# where everything comes from.

TOOLPREFIX=/opt/ertos/toolchains-x86_64/arm-2010.09/bin/arm-none-eabi-
GCC="$TOOLPREFIX"gcc
OBJDUMP="$TOOLPREFIX"objdump

WD=$(pwd)
for OPT in O1 O2
do

  # the binary is produced by GCC.

  $GCC -"$OPT" -c loop.c -o "$OPT"/loop-"$OPT".o

  # the disassembly comes from objdump.
  $OBJDUMP -d "$OPT"/loop-"$OPT".o > "$OPT"/loop-"$OPT".elf.txt

  # the symbol table is also extracted (target.py reads .symtab).
  $OBJDUMP -t "$OPT"/loop-"$OPT".o > "$OPT"/loop-"$OPT".elf.symtab

  # the standalone NICTA c-parser is used to extract function signatures
  # from the source file.
  c-parser --mmbytes loop.c > "$OPT"/loop-"$OPT".sigs

  # the decompiler reads the disassembly and signatures and produces
  # the binary functions.
  pushd ~/dev/new-decompiler/graph
  ../with_hol.sh ./decompile.sh -fast $WD/"$OPT"/loop-"$OPT"
  popd

  # clean up some extra disassembler output.
  mkdir -p "$OPT"/decomp
  mv "$OPT"/*.sml "$OPT"/*.markdown "$OPT"/decomp

  # give the decompilation its expected name.
  mv "$OPT"/loop-"$OPT".tom "$OPT"/ASM"$OPT"Funs.txt
done

